{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","describe","it","color","undefined","teste","NaN","promise","testPromise","rejectPromise","fail","error","promiseResolved","promiseRejected","done","add","a","b","logTest","label","x","deepEqual","equal","Error","Promise","resolve","reject","setTimeout"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;;;;;AAEAC,SAAS,KAAT,EAAgB,YAAM;AAClBC,OAAG,oBAAH,EAAyB,YAAM;AAC3B,wBAAe,iBAAf;AACA,wBAAe,iBAAf,EAAkC,iBAAlC;AACH,KAHD;AAIAA,OAAG,aAAH,EAAkB,YAAM;AACpB,6BAAI,oBAAJ;AACA;AACH,KAHD;AAIAA,OAAG,qCAAH,EAA0C,YAAM;AAC5C,6BAAI,EAAEC,OAAO,OAAT,EAAJ,EAAwB,EAAEA,OAAO,SAAT,EAAxB,EAA8C,sCAA9C;AACH,KAFD;AAGAD,OAAG,cAAH,EAAmB,YAAM;AACrB,6BAAI,EAAEC,OAAO,MAAT,EAAJ,EAAuB,iBAAvB,EAA0C,EAAEA,OAAO,QAAT,EAA1C,EAA+D,mBAA/D;AACA,6BAAI,EAAEA,OAAO,OAAT,EAAJ,EAAwB,kBAAxB,EAA4C,EAAEA,OAAO,KAAT,EAA5C,EAA8D,gBAA9D;AACH,KAHD;AAIAD,OAAG,kCAAH,EAAuC,YAAM;AACzC,6BAAI,EAAEC,OAAO,SAAT,EAAJ,EAA0B,oBAA1B,EAAgDC,SAAhD;AACA,6BAAI,EAAED,OAAO,QAAT,EAAJ,EAAyB,aAAzB,EAAwC,IAAxC;AACH,KAHD;AAIAD,OAAG,uBAAH,EAA4B,YAAM;AAC9B,6BAAI,EAAEC,OAAO,OAAT,EAAJ,EAAwB,cAAxB,EAAwC,EAAEE,OAAO,OAAT,EAAxC;AACH,KAFD;AAGAH,OAAG,sBAAH,EAA2B,YAAM;AAC7B,6BAAI,EAAEC,OAAO,QAAT,EAAJ,EAAyB,cAAzB,EAAyC,CAAC,MAAD,EAAS,OAAT,CAAzC;AACH,KAFD;AAGAD,OAAG,yBAAH,EAA8B,YAAM;AAChC,6BAAI,EAAEC,OAAO,MAAT,EAAJ,EAAuB,eAAvB,EAAwC;AAAA,mBAAM,CAAC,OAAD,EAAU,OAAV,CAAN;AAAA,SAAxC;AACH,KAFD;AAGAD,OAAG,mBAAH,EAAwB,YAAM;AAC1B,6BAAI,EAAEC,OAAO,KAAT,EAAJ,EAAsB,SAAtB,EAAiCG,GAAjC;AACH,KAFD;AAGAJ,OAAG,sBAAH,EAA2B,YAAM;AAC7B,6BAAI,EAAEC,OAAO,MAAT,EAAJ,EAAuB,aAAvB,EAAsC,GAAtC;AACH,KAFD;AAGAD,OAAG,uBAAH,EAA4B,kBAAY;AACpC,YAAMK,UAAUC,YAAY,IAAZ,CAAhB;AACA,6BAAI,EAAEL,OAAO,QAAT,EAAJ,EAAyB,iBAAzB,EAA4CI,OAA5C;AACA,YAAME,gBAAgB,eAAhBA,aAAgB,CAAOC,IAAP,EAAgB;AAClC,gBAAI;AACA,uBAAO,MAAMF,YAAY,KAAZ,CAAb;AACH,aAFD,CAGA,OAAOG,KAAP,EAAc;AACV,uBAAOA,KAAP;AACH;AACJ,SAPD;AAQA,YAAMC,kBAAkB,MAAMJ,YAAY,IAAZ,CAA9B;AACA,6BAAI,EAAEL,OAAO,OAAT,EAAJ,EAAwB,kBAAxB,EAA4CS,eAA5C;AACA,YAAMC,kBAAkB,MAAMJ,cAAc,KAAd,CAA9B;AACA,6BAAI,EAAEN,OAAO,KAAT,EAAJ,EAAsB,kBAAtB,EAA0CU,eAA1C;AACH,KAfD;AAgBH,CAnDD;AAoDAZ,SAAS,UAAT,EAAqB,YAAM;AACvBC,OAAG,MAAH,EAAW,UAACY,IAAD,EAAU;AACjB,YAAMC,MAAM,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,IAAIC,CAAd;AAAA,SAAZ;AACA,YAAMC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAQC,CAAR,EAAc;AAC1B,oBAAQD,KAAR;AACI,qBAAK,QAAL;AACInB,2BAAOqB,SAAP,CAAiBD,CAAjB,EAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA;AACJ,qBAAK,SAAL;AACIpB,2BAAOsB,KAAP,CAAaF,CAAb,EAAgB,CAAhB;AACAN;AACA;AACJ;AAAS,0BAAMS,MAAM,kBAAN,CAAN;AARb;AAUH,SAXD;AAYA,6BAASL,OAAT,EAAkBH,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B;AACH,KAfD;AAgBH,CAjBD;AAkBA,IAAMP,cAAc,SAAdA,WAAc,CAACE,IAAD,EAAU;AAC1B,WAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,eAAqBC,WAAW,YAAM;AACrD,mBAAO,CAACjB,IAAD,GACHgB,OAAO,iBAAP,CADG,GAEHD,QAAQ,aAAR,CAFJ;AAGH,SAJuC,EAIrC,EAJqC,CAArB;AAAA,KAAZ,CAAP;AAKH,CAND;AAOA","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport log, { logInOut } from './index';\nimport { log as logDestructure } from './index';\ndescribe('Log', () => {\n    it('import destructure', () => {\n        logDestructure('abc_Destructure');\n        logDestructure('abc_Destructure', 'def_Destructure');\n    });\n    it('default log', () => {\n        log('default expression');\n        log(`default expression another default expression`);\n    });\n    it('use previous color if invalid color', () => {\n        log({ color: 'green' }, { color: 'invalid' }, 'invalid color chosen, using previous');\n    });\n    it('colored log ', () => {\n        log({ color: 'cyan' }, 'cyan expression', { color: 'yellow' }, 'yellow expression');\n        log({ color: 'green' }, 'green expression', { color: 'red' }, 'red expression');\n    });\n    it('should print null and undefined ', () => {\n        log({ color: 'magenta' }, 'magenta undefinded', undefined);\n        log({ color: 'yellow' }, 'yellow null', null);\n    });\n    it('should print objects ', () => {\n        log({ color: 'green' }, 'green object', { teste: 'teste' });\n    });\n    it('should print arrays ', () => {\n        log({ color: 'yellow' }, 'yellow array', ['wor1', 'word2']);\n    });\n    it('should print functions ', () => {\n        log({ color: 'blue' }, 'blue function', () => ['word1', 'word2']);\n    });\n    it('should print NaN ', () => {\n        log({ color: 'red' }, 'red NaN', NaN);\n    });\n    it('should print number ', () => {\n        log({ color: 'cyan' }, 'cyan number', 666);\n    });\n    it('should print promise ', async () => {\n        const promise = testPromise(true);\n        log({ color: 'yellow' }, 'promise pending', promise);\n        const rejectPromise = async (fail) => {\n            try {\n                return await testPromise(false);\n            }\n            catch (error) {\n                return error;\n            }\n        };\n        const promiseResolved = await testPromise(true);\n        log({ color: 'green' }, 'promise resolved', promiseResolved);\n        const promiseRejected = await rejectPromise(false);\n        log({ color: 'red' }, 'promise rejected', promiseRejected);\n    });\n});\ndescribe('logInOut', () => {\n    it('logs', (done) => {\n        const add = (a, b) => a + b;\n        const logTest = (label, x) => {\n            switch (label) {\n                case 'in: \\n':\n                    assert.deepEqual(x, [1, 2]);\n                    break;\n                case 'out: \\n':\n                    assert.equal(x, 3);\n                    done();\n                    break;\n                default: throw Error('different labels');\n            }\n        };\n        logInOut(logTest, add, 1, 2);\n    });\n});\nconst testPromise = (fail) => {\n    return new Promise((resolve, reject) => setTimeout(() => {\n        return !fail ?\n            reject('REJECT PROMISE!') :\n            resolve('END PROMISE');\n    }, 10));\n};\n//# sourceMappingURL=index.test.js.map"]}