{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","describe","it","ptzColorLog","breakLine","undefined","teste","NaN","promise","testPromise","rejectPromise","fail","promiseResolved","promiseRejected","done","add","a","b","logTest","label","x","deepEqual","equal","Error","Promise","resolve","reject","setTimeout"],"mappings":"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","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\nimport log from './index';\nimport { logInOut } from './index';\ndescribe('Log', () => {\n    describe('default', () => {\n        it('should break line after every arg', () => {\n            log('line 1');\n            log('line 1', 'line 2');\n        });\n    });\n    describe('colored', () => {\n        it('should not break line after color config ', () => {\n            log({ ptzColorLog: 'green' }, 'green line 1', { ptzColorLog: 'yellow' }, 'yellow line 1', { ptzColorLog: 'red' }, 'red line 1');\n        });\n        it('should break line after color config if break line equals true ', () => {\n            log({ ptzColorLog: 'green' }, 'green line 1', { ptzColorLog: 'yellow', breakLine: true }, 'yellow line 2', { ptzColorLog: 'red' }, 'red line 2');\n        });\n        it('should not break line after color config if break line equals true ', () => {\n            log({ ptzColorLog: 'green' }, 'green expression', { ptzColorLog: 'yellow', breakLine: false }, 'yellow expression', { ptzColorLog: 'red' }, 'red expression');\n        });\n        it('use previous ptzColorLog if invalid ptzColorLog', () => {\n            log({ ptzColorLog: 'green' }, { ptzColorLog: 'invalid' }, 'invalid ptzColorLog chosen, using previous');\n        });\n        it('should print null and undefined ', () => {\n            log({ ptzColorLog: 'magenta' }, 'magenta undefinded', undefined);\n            log({ ptzColorLog: 'yellow' }, 'yellow null', null);\n        });\n        it('should print objects ', () => {\n            log({ ptzColorLog: 'green' }, 'green object', { teste: 'teste' });\n        });\n        it('should print arrays ', () => {\n            log({ ptzColorLog: 'yellow' }, 'yellow array', ['wor1', 'word2']);\n        });\n        it('should print functions ', () => {\n            log({ ptzColorLog: 'blue' }, 'blue function', () => ['word1', 'word2']);\n        });\n        it('should print NaN ', () => {\n            log({ ptzColorLog: 'red' }, 'red NaN', NaN);\n        });\n        it('should print number ', () => {\n            log({ ptzColorLog: 'cyan' }, 'cyan number', 666);\n        });\n        describe('Loging Objects', () => {\n            it('should print promise ', async () => {\n                const promise = testPromise(true);\n                log({ ptzColorLog: 'yellow' }, 'promise pending', promise);\n                const rejectPromise = async (fail) => {\n                    try {\n                        return await testPromise(false);\n                    }\n                    catch (error) {\n                        return error;\n                    }\n                };\n                const promiseResolved = await testPromise(true);\n                log({ ptzColorLog: 'green' }, 'promise resolved', promiseResolved);\n                const promiseRejected = await rejectPromise(false);\n                log({ ptzColorLog: 'red' }, 'promise rejected', promiseRejected);\n                log({ ptzColorLog: 'red' }, 'welcome', 'to', { ptzColorLog: 'green' }, 'polutz!');\n            });\n        });\n        describe('break line', () => {\n            it('should not break line if breakLine equals false', () => {\n                log('line 1', { breakLine: false }, 'still line 1');\n            });\n        });\n    });\n});\ndescribe('logInOut', () => {\n    it('logs', (done) => {\n        const add = (a, b) => a + b;\n        const logTest = (label, x) => {\n            switch (label) {\n                case 'in: \\n':\n                    assert.deepEqual(x, [1, 2]);\n                    break;\n                case 'out: \\n':\n                    assert.equal(x, 3);\n                    done();\n                    break;\n                default: throw Error('different labels');\n            }\n        };\n        logInOut(logTest, add, 1, 2);\n    });\n});\nconst testPromise = (fail) => {\n    return new Promise((resolve, reject) => setTimeout(() => {\n        return !fail ?\n            reject('REJECT PROMISE!') :\n            resolve('END PROMISE');\n    }, 10));\n};\n//# sourceMappingURL=index.test.js.map"]}