{"version":3,"sources":["../dist-esnext/index.test.js"],"names":["assert","describe","it","ptzColorLog","undefined","teste","NaN","promise","testPromise","rejectPromise","fail","promiseResolved","promiseRejected","done","add","a","b","logTest","label","x","deepEqual","equal","Error","Promise","resolve","reject","setTimeout"],"mappings":";;AAAA;;IAAYA,M;;AACZ;;;;;;;;;;AAEAC,SAAS,KAAT,EAAgB,YAAM;AAClBC,OAAG,aAAH,EAAkB,YAAM;AACpB,6BAAI,oBAAJ;AACA;AACH,KAHD;AAIAA,OAAG,iDAAH,EAAsD,YAAM;AACxD,6BAAI,EAAEC,aAAa,OAAf,EAAJ,EAA8B,EAAEA,aAAa,SAAf,EAA9B,EAA0D,4CAA1D;AACH,KAFD;AAGAD,OAAG,cAAH,EAAmB,YAAM;AACrB,6BAAI,EAAEC,aAAa,OAAf,EAAJ,EAA8B,kBAA9B,EAAkD,EAAEA,aAAa,QAAf,EAAlD,EAA6E,mBAA7E,EAAkG,EAAEA,aAAa,KAAf,EAAlG,EAA0H,gBAA1H;AACH,KAFD;AAGAD,OAAG,kCAAH,EAAuC,YAAM;AACzC,6BAAI,EAAEC,aAAa,SAAf,EAAJ,EAAgC,oBAAhC,EAAsDC,SAAtD;AACA,6BAAI,EAAED,aAAa,QAAf,EAAJ,EAA+B,aAA/B,EAA8C,IAA9C;AACH,KAHD;AAIAD,OAAG,uBAAH,EAA4B,YAAM;AAC9B,6BAAI,EAAEC,aAAa,OAAf,EAAJ,EAA8B,cAA9B,EAA8C,EAAEE,OAAO,OAAT,EAA9C;AACH,KAFD;AAGAH,OAAG,sBAAH,EAA2B,YAAM;AAC7B,6BAAI,EAAEC,aAAa,QAAf,EAAJ,EAA+B,cAA/B,EAA+C,CAAC,MAAD,EAAS,OAAT,CAA/C;AACH,KAFD;AAGAD,OAAG,yBAAH,EAA8B,YAAM;AAChC,6BAAI,EAAEC,aAAa,MAAf,EAAJ,EAA6B,eAA7B,EAA8C;AAAA,mBAAM,CAAC,OAAD,EAAU,OAAV,CAAN;AAAA,SAA9C;AACH,KAFD;AAGAD,OAAG,mBAAH,EAAwB,YAAM;AAC1B,6BAAI,EAAEC,aAAa,KAAf,EAAJ,EAA4B,SAA5B,EAAuCG,GAAvC;AACH,KAFD;AAGAJ,OAAG,sBAAH,EAA2B,YAAM;AAC7B,6BAAI,EAAEC,aAAa,MAAf,EAAJ,EAA6B,aAA7B,EAA4C,GAA5C;AACH,KAFD;AAGAF,aAAS,gBAAT,EAA2B,YAAM;AAC7BC,WAAG,uBAAH,0DAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBK,mCADkB,GACRC,YAAY,IAAZ,CADQ;;AAExB,iDAAI,EAAEL,aAAa,QAAf,EAAJ,EAA+B,iBAA/B,EAAkDI,OAAlD;;AACME,yCAHkB;AAAA,oGAGF,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAEDF,YAAY,KAAZ,CAFC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAHE;;AAAA,gDAGlBC,aAHkB;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAWMD,YAAY,IAAZ,CAXN;;AAAA;AAWlBG,2CAXkB;;AAYxB,iDAAI,EAAER,aAAa,OAAf,EAAJ,EAA8B,kBAA9B,EAAkDQ,eAAlD;AAZwB;AAAA,mCAaMF,cAAc,KAAd,CAbN;;AAAA;AAalBG,2CAbkB;;AAcxB,iDAAI,EAAET,aAAa,KAAf,EAAJ,EAA4B,kBAA5B,EAAgDS,eAAhD;AACA,iDAAI,EAAET,aAAa,KAAf,EAAJ,EAA4B,SAA5B,EAAuC,EAAEA,aAAa,QAAf,EAAvC,EAAkE,IAAlE,EAAwE,EAAEA,aAAa,OAAf,EAAxE,EAAkG,SAAlG;;AAfwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA5B;AAiBH,KAlBD;AAmBH,CAjDD;AAkDAF,SAAS,UAAT,EAAqB,YAAM;AACvBC,OAAG,MAAH,EAAW,UAACW,IAAD,EAAU;AACjB,YAAMC,MAAM,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUD,IAAIC,CAAd;AAAA,SAAZ;AACA,YAAMC,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAQC,CAAR,EAAc;AAC1B,oBAAQD,KAAR;AACI,qBAAK,QAAL;AACIlB,2BAAOoB,SAAP,CAAiBD,CAAjB,EAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB;AACA;AACJ,qBAAK,SAAL;AACInB,2BAAOqB,KAAP,CAAaF,CAAb,EAAgB,CAAhB;AACAN;AACA;AACJ;AAAS,0BAAMS,MAAM,kBAAN,CAAN;AARb;AAUH,SAXD;AAYA,6BAASL,OAAT,EAAkBH,GAAlB,EAAuB,CAAvB,EAA0B,CAA1B;AACH,KAfD;AAgBH,CAjBD;AAkBA,IAAMN,cAAc,SAAdA,WAAc,CAACE,IAAD,EAAU;AAC1B,WAAO,IAAIa,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,eAAqBC,WAAW,YAAM;AACrD,mBAAO,CAAChB,IAAD,GACHe,OAAO,iBAAP,CADG,GAEHD,QAAQ,aAAR,CAFJ;AAGH,SAJuC,EAIrC,EAJqC,CAArB;AAAA,KAAZ,CAAP;AAKH,CAND;AAOA","file":"index.test.js","sourcesContent":["import * as assert from 'ptz-assert';\r\nimport log from './index';\r\nimport { logInOut } from './index';\r\ndescribe('Log', () => {\r\n    it('default log', () => {\r\n        log('default expression');\r\n        log(`default expression another default expression`);\r\n    });\r\n    it('use previous ptzColorLog if invalid ptzColorLog', () => {\r\n        log({ ptzColorLog: 'green' }, { ptzColorLog: 'invalid' }, 'invalid ptzColorLog chosen, using previous');\r\n    });\r\n    it('colored log ', () => {\r\n        log({ ptzColorLog: 'green' }, 'green expression', { ptzColorLog: 'yellow' }, 'yellow expression', { ptzColorLog: 'red' }, 'red expression');\r\n    });\r\n    it('should print null and undefined ', () => {\r\n        log({ ptzColorLog: 'magenta' }, 'magenta undefinded', undefined);\r\n        log({ ptzColorLog: 'yellow' }, 'yellow null', null);\r\n    });\r\n    it('should print objects ', () => {\r\n        log({ ptzColorLog: 'green' }, 'green object', { teste: 'teste' });\r\n    });\r\n    it('should print arrays ', () => {\r\n        log({ ptzColorLog: 'yellow' }, 'yellow array', ['wor1', 'word2']);\r\n    });\r\n    it('should print functions ', () => {\r\n        log({ ptzColorLog: 'blue' }, 'blue function', () => ['word1', 'word2']);\r\n    });\r\n    it('should print NaN ', () => {\r\n        log({ ptzColorLog: 'red' }, 'red NaN', NaN);\r\n    });\r\n    it('should print number ', () => {\r\n        log({ ptzColorLog: 'cyan' }, 'cyan number', 666);\r\n    });\r\n    describe('Loging Objects', () => {\r\n        it('should print promise ', async () => {\r\n            const promise = testPromise(true);\r\n            log({ ptzColorLog: 'yellow' }, 'promise pending', promise);\r\n            const rejectPromise = async (fail) => {\r\n                try {\r\n                    return await testPromise(false);\r\n                }\r\n                catch (error) {\r\n                    return error;\r\n                }\r\n            };\r\n            const promiseResolved = await testPromise(true);\r\n            log({ ptzColorLog: 'green' }, 'promise resolved', promiseResolved);\r\n            const promiseRejected = await rejectPromise(false);\r\n            log({ ptzColorLog: 'red' }, 'promise rejected', promiseRejected);\r\n            log({ ptzColorLog: 'red' }, 'welcome', { ptzColorLog: 'yellow' }, 'to', { ptzColorLog: 'green' }, 'polutz!');\r\n        });\r\n    });\r\n});\r\ndescribe('logInOut', () => {\r\n    it('logs', (done) => {\r\n        const add = (a, b) => a + b;\r\n        const logTest = (label, x) => {\r\n            switch (label) {\r\n                case 'in: \\n':\r\n                    assert.deepEqual(x, [1, 2]);\r\n                    break;\r\n                case 'out: \\n':\r\n                    assert.equal(x, 3);\r\n                    done();\r\n                    break;\r\n                default: throw Error('different labels');\r\n            }\r\n        };\r\n        logInOut(logTest, add, 1, 2);\r\n    });\r\n});\r\nconst testPromise = (fail) => {\r\n    return new Promise((resolve, reject) => setTimeout(() => {\r\n        return !fail ?\r\n            reject('REJECT PROMISE!') :\r\n            resolve('END PROMISE');\r\n    }, 10));\r\n};\r\n//# sourceMappingURL=index.test.js.map"]}